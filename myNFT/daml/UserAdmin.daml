module UserAdmin where

import Token
import Payment

{-
    [3]

    We need to allow the different participants to be onboarded.
    2 types of users in this network: owners and issuers 
    Create templates that correspond to the different types of users that are undersigned (서명된) by the userAdmin.

    This module spell out both issuers and content creators to be able to ask the userAdmin to be allowed on the network.
    We ensure that once they're granted owner or issuer status, they can (1) issue tokens, and (2) as owners they're able to accept TokenOffers that have been offered to them.

    +++ One last thing to add: the ability to accept this type of contract ("AcceptTokenAsNewOwner")
    instead of based on the ContractId of the TokenOffer, to do so based on a key.
-}

template Issuer -- the content creators
    -- this entitlement is granted by a userAdmin to the issuer to be able to mint NFT.
    with
        userAdmin: Party
        issuer: Party
    where
        signatory userAdmin 
        observer issuer -- [NS]

        -- userAdmin will be able to grant this right to a particular issuer, but they can only issue one token with it.
        -- to allow an issuer to be able to make as many tokens as they want, add the keyword "nonconsuming"
        -- this way, every time a token is minted, old token is not archived.

        nonconsuming choice MintToken: ContractId Token -- by "Token" I mean NFT. don't forget to import the Token module.
            with 
                description: Text -- description of the token
                initialPrice: Decimal
                currency: Text -- preferred currency to get reimbursed for the royalty
                royaltyRate: Decimal 
            controller issuer
            do
                issued <- getTime -- current time gets passed to "create Token" ("issued" is the handler)
                -- without the "issued" being passed in as an arg, "create Token" will throw an error, since it requires the "issed" parameter (issued time)
                -- this cannot be a parameter, because this shouldn't be part of user input  
                create Token
                    with
                        lastPrice = initialPrice
                        owner = issuer
                        .. -- means everything from the original contract (what's in the "with" block of this template i.e. userAdmin, issuer remain the same)

        choice RevokeIssuer: () -- upon revoking issuer's right, the contract will be archived
            controller userAdmin -- userAdmin can also revoke issuer's right to do this
            do return ()

-- I want random new issuer to be able to ask for a token, aka issuer contract based off of the above template
template IssuerRequest
    with
        userAdmin: Party -- request to the userAdmin
        issuer: Party -- by the issuer
        reason: Text -- where they give some sort of a reason why they think they should be allowed onto the network and to be allowed to issue these tokens
        -- the reason could be a secret kemy that they agreed to offline, or all of the KYC information that could be necessary in order to be allowed on the network
    where
        signatory issuer 

        choice GrantIssuerRights: ContractId Issuer
            controller userAdmin
            do
                -- we wire up the issuer
                create Issuer with .. -- with all of the fields provided above in the "with" block of the IssuerRequest

        choice RejectIssuerRequest: () -- incoming IssuerRequest may be rejected
            controller userAdmin
            do return ()

-- template which allows a newOwner to take possession of the NFT
template Owner 
    with 
        userAdmin: Party -- approved by the userAdmin
        owner: Party
    where
        signatory userAdmin -- the contract is undersigned by the userAdmin
        observer owner -- [NA]
        
        -- allow the owner to accept token as a newOwner
        -- we're passing into this choice another token offer
        -- we don't want this owner grant to be just a single time acceptance. make this nonconsuming.
        nonconsuming choice AcceptTokenAsNewOwner: (ContractId Token, ContractId Payable, Optional(ContractId Payable))
            with
                offerId: ContractId TokenOffer -- we can pass another contract to this contract
            controller owner
            do  
                -- from this choice we'll exercise the AcceptToken on that offerId 
                exercise offerId AcceptToken 

        nonconsuming choice AcceptTokenByKey: (ContractId Token, ContractId Payable, Optional(ContractId Payable))
            with
                -- instead of taking the contractId of a contract, take in who the issuer we want to accept, who the current owner is of the nft that we want to accept
                issuer: Party
                currentOwner: Party -- old owner of the token that gets accepted. if you name this ALSO "owner" it'll be conflicted with the "owner" parameter of this Owner template
                description: Text
            controller owner
            do
                -- instead of exercising the choice by offerId, we'll do so by key
                exerciseByKey @TokenOffer (issuer, currentOwner, description) AcceptToken -- specify the key to look this up
                -- this allows an owner to accept the token based on this key, rather than having to specify the offerId.
                -- this is just a different way to do it compared to the choice above (AcceptTokenAsNewOwner); there are diff reasons to use keys vs. contractId.
                -- contractId might change if someone tries to update the contract and they change a field. the contractId will get expired since the old version of the contract will be archived,
                -- whereas keys are more persistent.

        -- we also want the userAdmin to be able to revoke the owner rights
        choice RevokeOwnerRights: ()
            controller userAdmin
            do return ()
        
-- Owner template allows owner to accept ownership of a token on behalf of both themself AND the userAdmin.
-- Within this context of "exercise offerId AcceptToken", we have the signature of both the userAdmin and the owner.
-- Daml does a check to make sure that the userAdmin is the same one as is required on the TokenOffer.
-- i.e. the owner could issue themselves an owner contract, where they specify as themselves as the userAdmin, they could do that on the network,
-- but they will not be able to do that to accept tokens that were signed off by the actual userAdmin.
-- This means that only onboarded owners are able to take possession of NFTs.


template OwnerRequest
    with 
        userAdmin: Party
        owner: Party
        reason: Text -- reason why they should be allowed on the network
    where
        signatory owner -- they'll be the one to make a request
        observer userAdmin -- [NS]

        choice GrantOwnerRights: ContractId Owner -- resulting in a verified owner
            controller userAdmin
            do
                create Owner with .. -- all the fields above

        choice RejectOwnerRequest: () -- incoming OwnerRequest may be rejected
            controller userAdmin
            do return ()

-- both on the OwnerRequest and the IssuerRequest, add the ability for the userAdmin to reject the request